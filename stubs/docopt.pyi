# Stubs for docopt (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class DocoptLanguageError(Exception): ...

class DocoptExit(SystemExit):
    usage: str = ...
    def __init__(self, message: str = ...) -> None: ...

class Pattern:
    def __eq__(self, other: Any): ...
    def __hash__(self): ...
    def fix(self): ...
    def fix_identities(self, uniq: Optional[Any] = ...): ...
    def fix_repeating_arguments(self): ...
    @property
    def either(self): ...

class ChildPattern(Pattern):
    name: Any = ...
    value: Any = ...
    def __init__(self, name: Any, value: Optional[Any] = ...) -> None: ...
    def flat(self, *types: Any): ...
    def match(self, left: Any, collected: Optional[Any] = ...): ...

class ParentPattern(Pattern):
    children: Any = ...
    def __init__(self, *children: Any) -> None: ...
    def flat(self, *types: Any): ...

class Argument(ChildPattern):
    def single_match(self, left: Any): ...
    @classmethod
    def parse(class_: Any, source: Any): ...

class Command(Argument):
    name: Any = ...
    value: Any = ...
    def __init__(self, name: Any, value: bool = ...) -> None: ...
    def single_match(self, left: Any): ...

class Option(ChildPattern):
    value: Any = ...
    def __init__(self, short: Optional[Any] = ..., long: Optional[Any] = ..., argcount: int = ..., value: bool = ...) -> None: ...
    @classmethod
    def parse(class_: Any, option_description: Any): ...
    def single_match(self, left: Any): ...
    @property
    def name(self): ...

class Required(ParentPattern):
    def match(self, left: Any, collected: Optional[Any] = ...): ...

class Optional(ParentPattern):
    def match(self, left: Any, collected: Optional[Any] = ...): ...

class AnyOptions(Optional): ...

class OneOrMore(ParentPattern):
    def match(self, left: Any, collected: Optional[Any] = ...): ...

class Either(ParentPattern):
    def match(self, left: Any, collected: Optional[Any] = ...): ...

class TokenStream(list):
    error: Any = ...
    def __init__(self, source: Any, error: Any) -> None: ...
    def move(self): ...
    def current(self): ...

# class Dict(dict): ... # this is just a Dict with special __repr__
from typing import Dict
def docopt(doc: Any, argv: Optional[Any] = ..., help: bool = ..., version: Optional[Any] = ..., options_first: bool = ...) -> Dict[str, str]: ...
