# Stubs for schema (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional as Optional

class SchemaError(Exception):
    autos: Any = ...
    errors: Any = ...
    def __init__(self, autos: Any, errors: Optional[Any] = ...) -> None: ...
    @property
    def code(self): ...

class SchemaWrongKeyError(SchemaError): ...
class SchemaMissingKeyError(SchemaError): ...
class SchemaOnlyOneAllowedError(SchemaError): ...
class SchemaForbiddenKeyError(SchemaError): ...
class SchemaUnexpectedTypeError(SchemaError): ...

class And:
    def __init__(self, *args: Any, **kw: Any) -> None: ...
    def validate(self, data: Any): ...

class Or(And):
    only_one: Any = ...
    match_count: int = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def reset(self) -> None: ...
    def validate(self, data: Any): ...

class Regex:
    NAMES: Any = ...
    def __init__(self, pattern_str: Any, flags: int = ..., error: Optional[Any] = ...) -> None: ...
    def validate(self, data: Any): ...

class Use:
    def __init__(self, callable_: Any, error: Optional[Any] = ...) -> None: ...
    def validate(self, data: Any): ...

class Schema:
    def __init__(self, schema: Any, error: Optional[Any] = ..., ignore_extra_keys: bool = ..., name: Optional[Any] = ...) -> None: ...
    def is_valid(self, data: Any): ...
    def validate(self, data: Any): ...
    def json_schema(self, schema_id: Optional[Any] = ..., is_main_schema: bool = ...): ...

class Optional(Schema):
    default: Any = ...
    key: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __hash__(self): ...
    def __eq__(self, other: Any): ...
    def reset(self) -> None: ...

class Hook(Schema):
    handler: Any = ...
    key: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class Forbidden(Hook):
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...

class Const(Schema):
    def validate(self, data: Any): ...
